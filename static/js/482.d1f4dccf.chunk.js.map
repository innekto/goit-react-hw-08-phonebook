{"version":3,"file":"static/js/482.d1f4dccf.chunk.js","mappings":"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","sources":["constants/ValidationSchema.js","components/LoginForm/LoginForm.js","pages/LoginPage.js"],"sourcesContent":["import * as yup from 'yup';\n\nexport const YupValidationRegistration = yup.object().shape({\n  name: yup\n    .string()\n    .min(3, 'Too Short !')\n    .max(20, 'Too Long !')\n    .matches(/(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/, {\n      message:\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan'\",\n    })\n    .required('Please enter your name'),\n\n  email: yup.string().email('Enter a Vaid Email').required('Email is Required'),\n\n  password: yup\n    .string()\n    .required('Enter Your Password')\n    // .matches(PasswordRegEx, 'Uppercase Lowercase Special char Required')\n    .min(8, 'Password Should be minimum 8 character')\n    .max(20, 'Too long'),\n});\n\nexport const YupValidationLoginForm = yup.object().shape({\n  email: yup.string().email('Enter a Vaid Email').required('Email is Required'),\n\n  password: yup\n    .string()\n    .required('Enter Your Password')\n    .min(8, 'Password Should be minimum 8 character')\n    .max(20, 'Too long'),\n});\n\nexport const YupValidationLAddContactsForm = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Too Short!')\n    .max(20, 'Too Long!')\n    .matches(/(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/, {\n      message:\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan'\",\n    })\n    .required('Name is required'),\n  number: yup\n    .string()\n    .min(12, 'Too Short!')\n    .max(20, 'Too Long!')\n    .matches(/^[+0-9-]+$/, {\n      message:\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n    })\n    .required('Phone number is required'),\n});\n","import { toast } from 'react-toastify';\nimport { useDispatch } from 'react-redux';\nimport { logInUser } from 'redux/auth/authOperation';\nimport { useState } from 'react';\nimport { useFormik } from 'formik';\nimport { YupValidationLoginForm } from 'constants/ValidationSchema';\nimport {\n  Container,\n  Grid,\n  CssBaseline,\n  Typography,\n  Box,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  IconButton,\n  InputAdornment,\n  FormHelperText,\n} from '@mui/material';\n\nimport { VisibilityOff, Visibility } from '@mui/icons-material';\n\nexport const LoginForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      logInUser({\n        email: values.email,\n        password: values.password,\n      })\n    )\n      .unwrap()\n      .then(() => {\n        toast.success('You are successfully registered in the phone book');\n        resetForm();\n      })\n      .catch(() => {\n        toast.error(\n          'Incorrect email or password. Please verify your information and try login again'\n        );\n        resetForm();\n      });\n  };\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: YupValidationLoginForm,\n    onSubmit: handleSubmit,\n  });\n\n  return (\n    <>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n\n          <form onSubmit={formik.handleSubmit}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}></Grid>\n\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"email\"\n                  label=\"Email Address\"\n                  name=\"email\"\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  value={formik.values.email}\n                  onChange={formik.handleChange}\n                  error={formik.touched.email && Boolean(formik.errors.email)}\n                  helperText={formik.touched.email && formik.errors.email}\n                />\n              </Grid>\n\n              <Grid item xs={12}></Grid>\n            </Grid>\n            <FormControl variant=\"outlined\" fullWidth>\n              <InputLabel htmlFor=\"password\">Password</InputLabel>\n              <OutlinedInput\n                autoComplete=\"on\"\n                id=\"password\"\n                fullWidth\n                required\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                type={showPassword ? 'text' : 'password'}\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowPassword}\n                      onMouseDown={handleMouseDownPassword}\n                      edge=\"end\"\n                    >\n                      {showPassword ? <VisibilityOff /> : <Visibility />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                label=\"Password\"\n                error={\n                  formik.touched.password && Boolean(formik.errors.password)\n                }\n              />\n              <FormHelperText error={true}>\n                {formik.touched.password && formik.errors.password}\n              </FormHelperText>\n            </FormControl>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign In\n            </Button>\n          </form>\n        </Box>\n      </Container>\n    </>\n  );\n};\n","import { LoginForm } from '../components/LoginForm/LoginForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <title>Login</title>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["YupValidationRegistration","yup","shape","name","min","max","matches","message","required","email","password","YupValidationLoginForm","YupValidationLAddContactsForm","number","LoginForm","useState","showPassword","setShowPassword","dispatch","useDispatch","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","logInUser","unwrap","then","toast","catch","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Typography","variant","handleSubmit","Grid","container","spacing","item","xs","TextField","fullWidth","id","label","type","autoComplete","value","onChange","handleChange","error","touched","Boolean","errors","helperText","FormControl","InputLabel","htmlFor","OutlinedInput","endAdornment","InputAdornment","position","IconButton","onClick","show","onMouseDown","event","preventDefault","edge","VisibilityOff","Visibility","FormHelperText","Button","mt","mb","Register"],"sourceRoot":""}